怎样在最低性能需求下，使用surface3办公？远程桌面？本机运行？ 只当个PDF阅读器吧

中间件PCDP注册码怎么注册，破解

git仓库上传大文件不太现实，且不方便，所以还是采用本地存放的形式吧，在一个移动硬盘中存放自己所有的数据（PDF、视频、学习资料、ISO镜像文件、安装程序等），后期尝试做个人云群晖

linux下基本操作，各种命令的使用。常用软件的使用：如c/c++编程,vscode,mysql,php,

在小公司里，不懂前后端分离，不懂接口，不懂编程，不懂架构，甚至连最基础的程序是真样跑起来的都不清楚，只是自己一个人在那里瞎鼓捣，没做出什么东西来，也没有系统的接触过什么。

能为自己的兴趣拼搏学习是很幸福的！

我真的不是太喜欢现在的工作，不过既然做了，就要做好，尝试着把工作做好，然后在空闲时间里多做些自己的东西来。好好学习、真的需要考验啊！
我相信 现在只有考验能让我离我的梦想更进一步了。真的！

自己的技能栈，我个人相信是比较完善的了，好多东西都听说过，只是没有系统的学习过，加油吧骚年！  

英语能力也不行了，英语还是不能忘，继续学习

bat命令其实很强大的，尝试把把自己要实现的一些功能先用bat命令来实习。

把一长串数字转化成数组格式，每个数对应一个数据。

windows terminal发布，尝试使用,windows系统版本18362以上

学习c语言标准库，知道标准库有哪些

常用数学算法库，如何使用，这些数学算法才是计算机的真正使用场景

好好理清数据结构，例如数组的使用

new的用法，从内存区开辟空间？
堆栈溢出？ 直接定义特别大的空间会出现溢出的情况，这时用new来定义有什么区别？

实时数据库可以用来模拟数采平台采集数据库,因为对数据的实时性有要求,而且量大,存多,读少,保存实时数据及其耗费空间,

好好学习现有的知识,css,js,echarts,java,c/c++,通讯,数据库等

中间件记录集变量大小修改不行,怎样能实现获取当前卷钢的所有断面信息,除了中间件记录集变量的形式,其他可以么?内存区?

把数据存入数据库的常用操作，各种数据类型,各种数据库,读写操作

堆栈相关:
问题: 
    1.堆和栈有什么区别?
    2.堆和栈的大小分别是多少?
    3.函数调用会不会影响堆栈空间?
    4.常见堆栈溢出的原因?
    5.堆栈是怎样push和pop的?

    栈是从高地址往低地址排的,自定义堆栈从低地址向高地址扩展
    和堆栈的操作相关的两个寄存器是EBP寄存器和ESP寄存器的.
    把EBP和ESP理解成2个指针
    ESP寄存器总是指向堆栈的栈顶. 
    执行PUSH命令向堆栈压入数据时，ESP减4，然后把数据拷贝到ESP指向的地址.
    执行POP命令时，首先把ESP指向的数据拷贝到内存地址/寄存器中，然后ESP加4
    函数的参数地址比EBP的值高，而函数的局部变量地址比EBP的值低，因此参数或局部变量总是通过EBP加减一定的偏移地址来访问的，比如，要访问函数的第一个参数为EBP+8.
    一个堆栈帧对应一次函数的调用。
    在函数开始时，对应的堆栈帧已经完整地建立了（所有的局部变量在函数帧建立时就已经分配好空间了，而不是随着函数的执行而不断创建和销毁的）
    在函数退出时，整个函数帧将被销毁
    在32位系统中，堆栈每个数据单元的大小为4字节。小于等于4字节的数据，比如字节、字、双字和布尔型，在堆栈中都是占4个字节的；大于4字节的数据在堆栈中占4字节整数倍的空间。
    

    c语言好好学,不要只浮于表面,要知道其底层实现原理

关于最近发布的鸿蒙os的跨平台的一些笔记:
    跨平台操作系统,
内核为linux内核,鸿蒙微内核,LiteOS
1分布式架构用于终端OS,跨终端无缝协同体验
2时延引擎和高性能IPC技术实现
3基于微内核构架重塑终端设备可信安全
4通过同一IDE支撑一次开发,多端部署,实现跨终端生态共享

主要是微内核技术实现跨平台

跨平台--JAVA.   
java跨平台的方案是JAVA语言规范,Class文件,JAVA虚拟机(JVM)等
java语言规范中规定零java语言中基本数据类型的取值范围和行为.所有java文件要编译成同一的Class文件.通过java虚拟机将Class文件转成对应平台的二进制文件.
java的平台无关性建立在java虚拟机的平台有关性基础之上,是因为java虚拟机屏蔽了底层操作系统和硬件的差异.
java源代码--(通过虚拟机)-->机器可执行的机器代码
HotSpot虚拟机:解释执行和即时编译两种形式.
解释执行:逐条将字节码翻译成机器码并执行.
即时编译(Just-in-time,JIT):将一个方法中包含的所有字节码编译成机器码后再执行.

Android实现跨平台
Android其实基于JAVA语言的,所以同理:想要运行一段Android代码,也要经过多个步骤,将Android源代码转换成机器可以执行的机器代码.
不同版本中实现不尽相同:
Android1.0(2008):名为Dalvik的虚拟机,继承一个解释器.App运行时会调用这个解释器,对代码进行逐句解释,速度很慢.
Android2.0(2010):引入JIT(just-in-time)即时编译机制,当APP运行时,会将用户经常使用的功能编译为机器能直接执行的01机器码,不用一句句的区翻译;速度加快,但每次启动App时都要重新编译一次,不能一劳永逸.
Android5.0(2014.10) 将虚拟机Dalvik换成ART(Ahead Run Time),将JIT的编译器替换成AOT(Ahead of time). app在下载后安装到手机上时同时把能编译的代码先编译成01机器码,剩下的不太好翻译的代码,在用户使用时再叫醒解释器来翻译.如此,不用每次打开APP都要编译,但安装app时间长,而且占用手机空间.
Android7.0(2016)采用混合编译机制,安装时先不编译中间代码,而是在用户空闲时将能编译成机器码的部分通过AOT 编译器先静态编译了.如果AOT还没来得及编译或者不能编译,再调用JIT+解释器.这种机制相当于用时间换空间.即缩短来用户安装app的等待时间,又将虚拟机里编译器和解释器能做的优化提升到最大小效率来.
android编译的问题:当前Android为解释执行+JIT+AOT的综合模式,在空间占用+安装速度+运行速度很好平衡.
APP应用在被打包成APK时,采用的是还是JAVA代码.在apk成用户可应用的过程中,还经历一个在android系统内部的编译过程.

鸿蒙实现跨平台:
方舟编译器和多终端开发IDE
多终端IDE,多语言同一编译,分布式架构Kit提供屏幕布局空间以及交互的自动适配,支持控件拖拽,面向预览的可视化编程,使开发者可以基于同一工程高效构建多端自动运行App,实现真正的一次开发,多端部署,跨设备实现共享生态.
有了IDE开发可以方便的开发一套代码,这样可以自动适配到各种设备中,但各种设备所执行的机器指令是不一样的,如何把这一套代码分别编译成各个设备所需要的机器指令?
android设备是由不同设备上内置的虚拟机进行编译的,所以编译之前就知道这个设备具体是什么.而鸿蒙OS中就是方舟编译器所干的事
方舟编译器时首个取代android虚拟机模式的静态编译器,可供开发者在开发环境中一次性将高级语言编译为机器码,此外,方舟编译器未来将支持多语言统一编译,可大幅提高开发效率.
android之所以慢是因为他的编译过程是在终端进行的,需要在用户手机上,通过虚拟机进行编译成可执行的机器代码.
而鸿蒙os使用的方舟编译器,可以将高级语言直接变成机器码,从而绕过虚拟机,并且这个编译过程并不是在用户手机上完成,而是在应用开发阶段就完成了.
通过方舟编译器,开发者的应用在下载之前就已经转化成机器可以识别的代码,因而可以在手机上快速安装,启动和运行.而无需再经过jvm的编译---某种程度上,方舟编译器编译器是将编译过程提前到应用开发阶段,从而大幅减少手机和操作系统的运行负担.
方舟编译器是首家完全替代语言虚拟机的静态编译器,完全不需要解释器.兼顾java开发效率和 c语言运行效率的编译器.

除了代码编译,方舟编译器也提供来更高效的内存机制"
android在内存回收上采用集中回收机制,发生全局回收时更需要暂停应用,这也是随机卡顿的根本原因之一.而方舟编译器采用了引用计数法来进行内存的实时回收,并且配合使用了专门的消除环算法(消除对象互相引用带来的无法回收问题),来避免GC集中式回收带来的系统卡顿.相比GC,方舟的内存回收是实时的而非集中式的,且不需要暂停应用进程,这样便大大消除了卡顿.